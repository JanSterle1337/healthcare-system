// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using healthcare_system.Data;

#nullable disable

namespace healthcare_system.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231128163943_doctor_change")]
    partial class doctor_change
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MedicinePrescription", b =>
                {
                    b.Property<string>("MedicinesMedicineId")
                        .HasColumnType("text")
                        .HasColumnName("medicines_medicine_id");

                    b.Property<string>("PrescriptionId")
                        .HasColumnType("text")
                        .HasColumnName("prescription_id");

                    b.HasKey("MedicinesMedicineId", "PrescriptionId")
                        .HasName("pk_medicine_prescription");

                    b.HasIndex("PrescriptionId")
                        .HasDatabaseName("ix_medicine_prescription_prescription_id");

                    b.ToTable("medicine_prescription", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id");

                    b.ToTable("AspNetRoleClaims", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id");

                    b.ToTable("AspNetUserClaims", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id");

                    b.ToTable("AspNetUserLogins", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("RoleId")
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id");

                    b.ToTable("AspNetUserRoles", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("AspNetUserTokens", "public");
                });

            modelBuilder.Entity("healthcare_system.Models.Consultation", b =>
                {
                    b.Property<string>("ConsultationId")
                        .HasColumnType("text")
                        .HasColumnName("consultation_id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("ReservationId")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasColumnName("reservation_id");

                    b.HasKey("ConsultationId")
                        .HasName("pk_consultations");

                    b.HasIndex("ReservationId")
                        .HasDatabaseName("ix_consultations_reservation_id");

                    b.ToTable("consultations", "public");
                });

            modelBuilder.Entity("healthcare_system.Models.Department", b =>
                {
                    b.Property<string>("DepartmentId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("department_id");

                    b.Property<string>("Floor")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("floor");

                    b.Property<string>("HospitalId")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasColumnName("hospital_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("DepartmentId")
                        .HasName("pk_departments");

                    b.HasIndex("HospitalId")
                        .HasDatabaseName("ix_departments_hospital_id");

                    b.ToTable("departments", "public");
                });

            modelBuilder.Entity("healthcare_system.Models.Doctor", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("DepartmentId")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasColumnName("department_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("specialization");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("ix_asp_net_users_department_id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", "public");
                });

            modelBuilder.Entity("healthcare_system.Models.Hospital", b =>
                {
                    b.Property<string>("HospitalId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("hospital_id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("postal_code");

                    b.HasKey("HospitalId")
                        .HasName("pk_hospitals");

                    b.ToTable("hospitals", "public");
                });

            modelBuilder.Entity("healthcare_system.Models.Medicine", b =>
                {
                    b.Property<string>("MedicineId")
                        .HasColumnType("text")
                        .HasColumnName("medicine_id");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("MedicineName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("medicine_name");

                    b.HasKey("MedicineId")
                        .HasName("pk_medicines");

                    b.ToTable("medicines", "public");
                });

            modelBuilder.Entity("healthcare_system.Models.Patient", b =>
                {
                    b.Property<string>("PatientId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("patient_id");

                    b.Property<int>("Age")
                        .HasColumnType("integer")
                        .HasColumnName("age");

                    b.Property<DateTime>("Birth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("birth");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email_address");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("sex");

                    b.HasKey("PatientId")
                        .HasName("pk_patients");

                    b.ToTable("patients", "public");
                });

            modelBuilder.Entity("healthcare_system.Models.Prescription", b =>
                {
                    b.Property<string>("PrescriptionId")
                        .HasColumnType("text")
                        .HasColumnName("prescription_id");

                    b.Property<string>("ConsultationId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("consultation_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.HasKey("PrescriptionId")
                        .HasName("pk_prescriptions");

                    b.HasIndex("ConsultationId")
                        .IsUnique()
                        .HasDatabaseName("ix_prescriptions_consultation_id");

                    b.ToTable("prescriptions", "public");
                });

            modelBuilder.Entity("healthcare_system.Models.TermReservation", b =>
                {
                    b.Property<string>("ReservationId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("reservation_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("doctor_id");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasColumnName("patient_id");

                    b.Property<bool>("ReservedBy")
                        .HasColumnType("boolean")
                        .HasColumnName("reserved_by");

                    b.Property<string>("termReservationReservationId")
                        .HasColumnType("character varying(50)")
                        .HasColumnName("term_reservation_reservation_id");

                    b.HasKey("ReservationId")
                        .HasName("pk_term_reservations");

                    b.HasIndex("DoctorId")
                        .HasDatabaseName("ix_term_reservations_doctor_id");

                    b.HasIndex("PatientId")
                        .HasDatabaseName("ix_term_reservations_patient_id");

                    b.HasIndex("termReservationReservationId")
                        .HasDatabaseName("ix_term_reservations_term_reservation_reservation_id");

                    b.ToTable("term_reservations", "public");
                });

            modelBuilder.Entity("MedicinePrescription", b =>
                {
                    b.HasOne("healthcare_system.Models.Medicine", null)
                        .WithMany()
                        .HasForeignKey("MedicinesMedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_medicine_prescription_medicines_medicines_medicine_id");

                    b.HasOne("healthcare_system.Models.Prescription", null)
                        .WithMany()
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_medicine_prescription_prescriptions_prescription_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("healthcare_system.Models.Doctor", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("healthcare_system.Models.Doctor", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id");

                    b.HasOne("healthcare_system.Models.Doctor", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("healthcare_system.Models.Doctor", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id");
                });

            modelBuilder.Entity("healthcare_system.Models.Consultation", b =>
                {
                    b.HasOne("healthcare_system.Models.TermReservation", "TermReservation")
                        .WithMany()
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_consultations_term_reservations_reservation_id");

                    b.Navigation("TermReservation");
                });

            modelBuilder.Entity("healthcare_system.Models.Department", b =>
                {
                    b.HasOne("healthcare_system.Models.Hospital", "Hospital")
                        .WithMany("Departments")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_departments_hospitals_hospital_id");

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("healthcare_system.Models.Doctor", b =>
                {
                    b.HasOne("healthcare_system.Models.Department", "Department")
                        .WithMany("Doctors")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_users_departments_department_id");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("healthcare_system.Models.Prescription", b =>
                {
                    b.HasOne("healthcare_system.Models.Consultation", "Consultation")
                        .WithOne("Prescription")
                        .HasForeignKey("healthcare_system.Models.Prescription", "ConsultationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_prescriptions_consultations_consultation_id");

                    b.Navigation("Consultation");
                });

            modelBuilder.Entity("healthcare_system.Models.TermReservation", b =>
                {
                    b.HasOne("healthcare_system.Models.Doctor", "Doctor")
                        .WithMany("Terms")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_term_reservations_doctor_doctor_id");

                    b.HasOne("healthcare_system.Models.Patient", "Patient")
                        .WithMany("Terms")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_term_reservations_patients_patient_id");

                    b.HasOne("healthcare_system.Models.TermReservation", "termReservation")
                        .WithMany()
                        .HasForeignKey("termReservationReservationId")
                        .HasConstraintName("fk_term_reservations_term_reservations_term_reservation_reservat");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("termReservation");
                });

            modelBuilder.Entity("healthcare_system.Models.Consultation", b =>
                {
                    b.Navigation("Prescription")
                        .IsRequired();
                });

            modelBuilder.Entity("healthcare_system.Models.Department", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("healthcare_system.Models.Doctor", b =>
                {
                    b.Navigation("Terms");
                });

            modelBuilder.Entity("healthcare_system.Models.Hospital", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("healthcare_system.Models.Patient", b =>
                {
                    b.Navigation("Terms");
                });
#pragma warning restore 612, 618
        }
    }
}
