// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using healthcare_system.Data;

#nullable disable

namespace healthcare_system.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231127223325_Sprememba_tipa_DateTime")]
    partial class Sprememba_tipa_DateTime
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MedicinePrescription", b =>
                {
                    b.Property<string>("MedicinesMedicineId")
                        .HasColumnType("text")
                        .HasColumnName("medicines_medicine_id");

                    b.Property<string>("PrescriptionId")
                        .HasColumnType("text")
                        .HasColumnName("prescription_id");

                    b.HasKey("MedicinesMedicineId", "PrescriptionId")
                        .HasName("pk_medicine_prescription");

                    b.HasIndex("PrescriptionId")
                        .HasDatabaseName("ix_medicine_prescription_prescription_id");

                    b.ToTable("medicine_prescription", (string)null);
                });

            modelBuilder.Entity("healthcare_system.Models.Consultation", b =>
                {
                    b.Property<string>("ConsultationId")
                        .HasColumnType("text")
                        .HasColumnName("consultation_id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("ReservationId")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasColumnName("reservation_id");

                    b.HasKey("ConsultationId")
                        .HasName("pk_consultations");

                    b.HasIndex("ReservationId")
                        .HasDatabaseName("ix_consultations_reservation_id");

                    b.ToTable("consultations", (string)null);
                });

            modelBuilder.Entity("healthcare_system.Models.Department", b =>
                {
                    b.Property<string>("DepartmentId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("department_id");

                    b.Property<string>("Floor")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("floor");

                    b.Property<string>("HospitalId")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasColumnName("hospital_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("DepartmentId")
                        .HasName("pk_departments");

                    b.HasIndex("HospitalId")
                        .HasDatabaseName("ix_departments_hospital_id");

                    b.ToTable("departments", (string)null);
                });

            modelBuilder.Entity("healthcare_system.Models.Doctor", b =>
                {
                    b.Property<string>("DoctorId")
                        .HasColumnType("text")
                        .HasColumnName("doctor_id");

                    b.Property<string>("DepartmentId")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasColumnName("department_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("specialization");

                    b.HasKey("DoctorId")
                        .HasName("pk_doctors");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("ix_doctors_department_id");

                    b.ToTable("doctors", (string)null);
                });

            modelBuilder.Entity("healthcare_system.Models.Hospital", b =>
                {
                    b.Property<string>("HospitalId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("hospital_id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("postal_code");

                    b.HasKey("HospitalId")
                        .HasName("pk_hospitals");

                    b.ToTable("hospitals", (string)null);
                });

            modelBuilder.Entity("healthcare_system.Models.Medicine", b =>
                {
                    b.Property<string>("MedicineId")
                        .HasColumnType("text")
                        .HasColumnName("medicine_id");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("MedicineName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("medicine_name");

                    b.HasKey("MedicineId")
                        .HasName("pk_medicines");

                    b.ToTable("medicines", (string)null);
                });

            modelBuilder.Entity("healthcare_system.Models.Patient", b =>
                {
                    b.Property<string>("PatientId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("patient_id");

                    b.Property<int>("Age")
                        .HasColumnType("integer")
                        .HasColumnName("age");

                    b.Property<DateTime>("Birth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("birth");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email_address");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("sex");

                    b.HasKey("PatientId")
                        .HasName("pk_patients");

                    b.ToTable("patients", (string)null);
                });

            modelBuilder.Entity("healthcare_system.Models.Prescription", b =>
                {
                    b.Property<string>("PrescriptionId")
                        .HasColumnType("text")
                        .HasColumnName("prescription_id");

                    b.Property<string>("ConsultationId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("consultation_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.HasKey("PrescriptionId")
                        .HasName("pk_prescriptions");

                    b.HasIndex("ConsultationId")
                        .IsUnique()
                        .HasDatabaseName("ix_prescriptions_consultation_id");

                    b.ToTable("prescriptions", (string)null);
                });

            modelBuilder.Entity("healthcare_system.Models.TermReservation", b =>
                {
                    b.Property<string>("ReservationId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("reservation_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("doctor_id");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasColumnName("patient_id");

                    b.Property<bool>("ReservedBy")
                        .HasColumnType("boolean")
                        .HasColumnName("reserved_by");

                    b.Property<string>("termReservationReservationId")
                        .HasColumnType("character varying(50)")
                        .HasColumnName("term_reservation_reservation_id");

                    b.HasKey("ReservationId")
                        .HasName("pk_term_reservations");

                    b.HasIndex("DoctorId")
                        .HasDatabaseName("ix_term_reservations_doctor_id");

                    b.HasIndex("PatientId")
                        .HasDatabaseName("ix_term_reservations_patient_id");

                    b.HasIndex("termReservationReservationId")
                        .HasDatabaseName("ix_term_reservations_term_reservation_reservation_id");

                    b.ToTable("term_reservations", (string)null);
                });

            modelBuilder.Entity("MedicinePrescription", b =>
                {
                    b.HasOne("healthcare_system.Models.Medicine", null)
                        .WithMany()
                        .HasForeignKey("MedicinesMedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_medicine_prescription_medicines_medicines_medicine_id");

                    b.HasOne("healthcare_system.Models.Prescription", null)
                        .WithMany()
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_medicine_prescription_prescriptions_prescription_id");
                });

            modelBuilder.Entity("healthcare_system.Models.Consultation", b =>
                {
                    b.HasOne("healthcare_system.Models.TermReservation", "TermReservation")
                        .WithMany()
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_consultations_term_reservations_reservation_id");

                    b.Navigation("TermReservation");
                });

            modelBuilder.Entity("healthcare_system.Models.Department", b =>
                {
                    b.HasOne("healthcare_system.Models.Hospital", "Hospital")
                        .WithMany("Departments")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_departments_hospitals_hospital_id");

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("healthcare_system.Models.Doctor", b =>
                {
                    b.HasOne("healthcare_system.Models.Department", "Department")
                        .WithMany("Doctors")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_doctors_departments_department_id");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("healthcare_system.Models.Prescription", b =>
                {
                    b.HasOne("healthcare_system.Models.Consultation", "Consultation")
                        .WithOne("Prescription")
                        .HasForeignKey("healthcare_system.Models.Prescription", "ConsultationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_prescriptions_consultations_consultation_id");

                    b.Navigation("Consultation");
                });

            modelBuilder.Entity("healthcare_system.Models.TermReservation", b =>
                {
                    b.HasOne("healthcare_system.Models.Doctor", "Doctor")
                        .WithMany("Terms")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_term_reservations_doctors_doctor_id");

                    b.HasOne("healthcare_system.Models.Patient", "Patient")
                        .WithMany("Terms")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_term_reservations_patients_patient_id");

                    b.HasOne("healthcare_system.Models.TermReservation", "termReservation")
                        .WithMany()
                        .HasForeignKey("termReservationReservationId")
                        .HasConstraintName("fk_term_reservations_term_reservations_term_reservation_reservat");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("termReservation");
                });

            modelBuilder.Entity("healthcare_system.Models.Consultation", b =>
                {
                    b.Navigation("Prescription")
                        .IsRequired();
                });

            modelBuilder.Entity("healthcare_system.Models.Department", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("healthcare_system.Models.Doctor", b =>
                {
                    b.Navigation("Terms");
                });

            modelBuilder.Entity("healthcare_system.Models.Hospital", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("healthcare_system.Models.Patient", b =>
                {
                    b.Navigation("Terms");
                });
#pragma warning restore 612, 618
        }
    }
}
