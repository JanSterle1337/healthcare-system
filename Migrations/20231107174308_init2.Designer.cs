// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using healthcare_system.Data;

#nullable disable

namespace healthcare_system.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231107174308_init2")]
    partial class init2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MedicinePrescription", b =>
                {
                    b.Property<string>("MedicinesMedicineId")
                        .HasColumnType("text");

                    b.Property<string>("PrescriptionId")
                        .HasColumnType("text");

                    b.HasKey("MedicinesMedicineId", "PrescriptionId");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("MedicinePrescription");
                });

            modelBuilder.Entity("healthcare_system.Models.Consultation", b =>
                {
                    b.Property<string>("ConsultationId")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReservationId")
                        .IsRequired()
                        .HasColumnType("character varying(50)");

                    b.HasKey("ConsultationId");

                    b.HasIndex("ReservationId");

                    b.ToTable("Consultations");
                });

            modelBuilder.Entity("healthcare_system.Models.Department", b =>
                {
                    b.Property<string>("DepartmentId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Floor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HospitalId")
                        .IsRequired()
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("DepartmentId");

                    b.HasIndex("HospitalId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("healthcare_system.Models.Doctor", b =>
                {
                    b.Property<string>("DoctorId")
                        .HasColumnType("text");

                    b.Property<string>("DepartmentId")
                        .IsRequired()
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("DoctorId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("healthcare_system.Models.Hospital", b =>
                {
                    b.Property<string>("HospitalId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("HospitalId");

                    b.ToTable("Hospitals");
                });

            modelBuilder.Entity("healthcare_system.Models.Medicine", b =>
                {
                    b.Property<string>("MedicineId")
                        .HasColumnType("text");

                    b.Property<string>("MedicineName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("MedicineId");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("healthcare_system.Models.Patient", b =>
                {
                    b.Property<string>("PatientId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Birth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.HasKey("PatientId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("healthcare_system.Models.Prescription", b =>
                {
                    b.Property<string>("PrescriptionId")
                        .HasColumnType("text");

                    b.Property<string>("ConsultationId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("PrescriptionId");

                    b.HasIndex("ConsultationId")
                        .IsUnique();

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("healthcare_system.Models.TermReservation", b =>
                {
                    b.Property<string>("ReservationId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("ReservedBy")
                        .HasColumnType("boolean");

                    b.Property<string>("termReservationReservationId")
                        .HasColumnType("character varying(50)");

                    b.HasKey("ReservationId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("termReservationReservationId");

                    b.ToTable("TermReservations");
                });

            modelBuilder.Entity("MedicinePrescription", b =>
                {
                    b.HasOne("healthcare_system.Models.Medicine", null)
                        .WithMany()
                        .HasForeignKey("MedicinesMedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("healthcare_system.Models.Prescription", null)
                        .WithMany()
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("healthcare_system.Models.Consultation", b =>
                {
                    b.HasOne("healthcare_system.Models.TermReservation", "TermReservation")
                        .WithMany()
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TermReservation");
                });

            modelBuilder.Entity("healthcare_system.Models.Department", b =>
                {
                    b.HasOne("healthcare_system.Models.Hospital", "Hospital")
                        .WithMany("Departments")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("healthcare_system.Models.Doctor", b =>
                {
                    b.HasOne("healthcare_system.Models.Department", "Department")
                        .WithMany("Doctors")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("healthcare_system.Models.Prescription", b =>
                {
                    b.HasOne("healthcare_system.Models.Consultation", "Consultation")
                        .WithOne("Prescription")
                        .HasForeignKey("healthcare_system.Models.Prescription", "ConsultationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultation");
                });

            modelBuilder.Entity("healthcare_system.Models.TermReservation", b =>
                {
                    b.HasOne("healthcare_system.Models.Doctor", "Doctor")
                        .WithMany("Terms")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("healthcare_system.Models.Patient", "Patient")
                        .WithMany("Terms")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("healthcare_system.Models.TermReservation", "termReservation")
                        .WithMany()
                        .HasForeignKey("termReservationReservationId");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("termReservation");
                });

            modelBuilder.Entity("healthcare_system.Models.Consultation", b =>
                {
                    b.Navigation("Prescription")
                        .IsRequired();
                });

            modelBuilder.Entity("healthcare_system.Models.Department", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("healthcare_system.Models.Doctor", b =>
                {
                    b.Navigation("Terms");
                });

            modelBuilder.Entity("healthcare_system.Models.Hospital", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("healthcare_system.Models.Patient", b =>
                {
                    b.Navigation("Terms");
                });
#pragma warning restore 612, 618
        }
    }
}
